module Test.Main where

import Prelude

import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Console (CONSOLE)
import Control.Monad.Eff.Exception (EXCEPTION, Error, error)
import Control.Monad.Eff.Random (RANDOM)
import Data.ArrayBuffer.ArrayBuffer (ARRAY_BUFFER)
import Data.Either (Either(..))
import Data.Traversable (for_, traverse)
import Pako (PAKO, asBytes, byteSize, deflateText, inflateText)
import Test.QuickCheck (QC, arbitrary, quickCheck', (<?>))
import Test.QuickCheck.Gen (randomSample')

newtype Res a = Res (Either Error a)

derive newtype instance showRes :: Show a => Show (Res a)

instance eqRes :: Eq a => Eq (Res a) where
  eq (Res (Right a)) (Res (Right b)) = a == b
  eq (Res (Left a)) (Res (Left b)) = true -- (eq `on` message) a b
  eq _ _ = false


assertEffEquals :: forall a e. Eq a => Show a => a -> QC e a -> QC e Unit
assertEffEquals expectedValue computation = do
  actualValue <- computation
  let msg = show expectedValue <> " /= " <> show actualValue
  quickCheck' 1 $ actualValue == expectedValue <?> msg
  

main :: forall e. Eff (console :: CONSOLE, random :: RANDOM, exception :: EXCEPTION, pako :: PAKO, arrayBuffer :: ARRAY_BUFFER | e) Unit
main = do
  xs <- randomSample' 100 arbitrary
  for_ xs \x -> do
    assertEffEquals (Res (Right x)) do
      c <- deflateText x
      d <- traverse inflateText c
      pure $ Res $ join d
    assertEffEquals (Res (Left (error "incorrect header check"))) do
      invalid <- asBytes x
      res <- inflateText invalid
      pure $ Res res
  assertEffEquals (Res (Right 1443)) do
    let json = """
{result:[{xys:[{y:2600000.00000003,x:36},{y:1799999.9999999702,x:38},{y:2000000,x:40},{y:3099999.99999997,x:42},{y:2200000,x:44},{y:2299999.99999997,x:46},{y:3300000,x:48},{y:2499999.99999997,x:50},{y:2500000,x:53},{y:3700000.00000003,x:56},{y:2900000.00000003,x:59},{y:3699999.99999997,x:62},{y:3200000.00000003,x:65},{y:3200000,x:68},{y:4300000.00000003,x:71},{y:3600000,x:75},{y:4800000,x:79},{y:5500000.00000003,x:83},{y:4300000,x:87},{y:5399999.99999997,x:91},{y:5300000,x:96},{y:4800000,x:101},{y:5800000.00000003,x:106},{y:6200000.00000003,x:111},{y:7100000.00000003,x:117},{y:8800000,x:123},{y:7500000,x:129},{y:7399999.99999994,x:135},{y:8700000,x:142},{y:10499999.99999994,x:149},{y:9800000.00000006,x:156},{y:8900000.00000006,x:164}],r:0.9653931713795998,name:sum/1000int,b:62734.41003083758,a:-408220.7532481188},{xys:[{y:2600000,x:27},{y:3600000,x:28},{y:2900000,x:29},{y:2900000,x:30},{y:3999999.9999999404,x:32},{y:3099999.9999999404,x:34},{y:4199999.99999994,x:36},{y:3599999.9999999404,x:38},{y:4799999.99999994,x:40},{y:4699999.99999994,x:42},{y:4500000,x:44},{y:5399999.99999994,x:46},{y:4699999.99999994,x:48},{y:6000000.00000006,x:50},{y:6100000,x:53},{y:6200000,x:56},{y:6600000.00000006,x:59},{y:5900000.00000006,x:62},{y:7200000.00000006,x:65},{y:7499999.99999994,x:68},{y:7699999.99999994,x:71},{y:8100000,x:75},{y:8400000,x:79},{y:9399999.99999994,x:83},{y:9299999.99999994,x:87},{y:10100000.00000012,x:91},{y:11500000.00000012,x:96}],r:0.9847167263989284,name:sum/2000int,b:113462.75763025558,a:-210251.51699428426},{xys:[{y:1900000,x:38},{y:2000000,x:40},{y:2100000,x:42},{y:3000000,x:44},{y:2300000.0000002384,x:46},{y:2399999.999999881,x:48},{y:3300000,x:50},{y:2600000.000000119,x:53},{y:3599999.999999881,x:56},{y:3099999.999999881,x:59},{y:3300000,x:62},{y:4200000,x:65},{y:3300000,x:68},{y:4300000.000000119,x:71},{y:3700000,x:75},{y:5900000,x:79},{y:4699999.999999881,x:83},{y:5999999.999999881,x:87},{y:5499999.999999881,x:91},{y:4700000,x:96},{y:5600000,x:101},{y:6300000,x:106},{y:6300000,x:111},{y:6300000,x:117},{y:6100000.000000119,x:123},{y:7199999.999999881,x:129},{y:7400000,x:135},{y:7800000,x:142},{y:8000000,x:149},{y:8200000,x:156},{y:9600000.00000012,x:164},{y:9800000.00000012,x:172},{y:9499999.99999988,x:181}],r:0.9773841012391682,name:foldl/1000int,b:54090.26401505448,a:170293.5654014945},{xys:[{y:2600000,x:27},{y:3500000,x:28},{y:2799999.999999881,x:29},{y:3700000,x:30},{y:3000000,x:32},{y:4499999.999999881,x:34},{y:3800000.000000119,x:36},{y:5199999.999999881,x:38},{y:5000000,x:40},{y:6000000,x:42},{y:4700000.000000119,x:44},{y:6699999.999999881,x:46},{y:6300000.000000119,x:48},{y:5900000,x:50},{y:7400000,x:53},{y:6300000,x:56},{y:6800000,x:59},{y:6800000,x:62},{y:7100000,x:65},{y:7500000,x:68},{y:7699999.999999881,x:71},{y:7900000,x:75},{y:8400000.00000012,x:79},{y:8900000.00000012,x:83},{y:9700000,x:87},{y:9900000.00000012,x:91},{y:11700000,x:96}],r:0.9626651221808511,name:foldl/2000int,b:106425.06889547395,a:498576.80713144055},{xys:[{y:2000000,x:36},{y:1899999.9999998808,x:38},{y:2300000,x:40},{y:3100000,x:42},{y:2700000.000000119,x:44},{y:2399999.999999881,x:46},{y:3200000,x:48},{y:2500000.000000119,x:50},{y:2600000,x:53},{y:4400000,x:56},{y:3900000,x:59},{y:4699999.999999881,x:62},{y:3500000,x:65},{y:4500000,x:68},{y:3500000,x:71},{y:4700000,x:75},{y:4200000,x:79},{y:5500000,x:83},{y:4599999.999999881,x:87},{y:5400000.000000119,x:91},{y:5800000.000000119,x:96},{y:4899999.999999881,x:101},{y:6000000,x:106},{y:7799999.999999642,x:111},{y:8500000.000000238,x:117},{y:7700000,x:123},{y:7099999.999999762,x:129},{y:6900000,x:135},{y:8300000.000000238,x:142},{y:9200000,x:149},{y:8900000,x:156},{y:9200000,x:164},{y:9400000.000000238,x:172}],r:0.9632189411129197,name:foldr/1000int,b:56429.16865743002,a:242241.9971332586},{xys:[{y:2700000,x:27},{y:3400000.0000002384,x:28},{y:2800000,x:29},{y:3899999.9999997616,x:30},{y:3200000.0000002384,x:32},{y:4300000,x:34},{y:3499999.9999997616,x:36},{y:4800000,x:38},{y:3900000,x:40},{y:5200000,x:42},{y:4500000.000000238,x:44},{y:5500000,x:46},{y:5600000,x:48},{y:5000000,x:50},{y:6100000.000000238,x:53},{y:7700000,x:56},{y:8599999.999999762,x:59},{y:7400000,x:62},{y:7300000,x:65},{y:7400000.000000238,x:68},{y:8000000,x:71},{y:10599999.999999762,x:75},{y:8900000.000000238,x:79},{y:9000000,x:83},{y:10000000,x:87},{y:10000000,x:91}],r:0.9566042526621797,name:foldr/2000int,b:118782.89277106033,a:-145727.37594866753}],name:Int}
"""
    def <- deflateText json
    pure $ Res $ byteSize <$> def
